# Generated by Django 4.1.7 on 2023-03-29 11:05

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Ingredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "calories",
                    models.FloatField(
                        help_text="number of calories in kcal per 100 grams",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "proteins",
                    models.FloatField(
                        help_text="amount of proteins in kcal per 100 grams",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "fats",
                    models.FloatField(
                        help_text="amount of fats in kcal per 100 grams",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "carbs",
                    models.FloatField(
                        help_text="amount of carbs in kcal per 100 grams",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("Fruits", "Fruits"),
                            ("Vegetables", "Vegetables"),
                            ("Meat", "Meat"),
                            ("Poultry", "Poultry"),
                            ("Fish", "Fish"),
                            ("Seafood", "Seafood"),
                            ("Milk", "Milk"),
                            ("Eggs", "Eggs"),
                            ("Baking", "Baking"),
                            ("Grains", "Grains"),
                            ("Beans", "Beans"),
                            ("Seasonings", "Seasonings"),
                            ("Spices", "Spices"),
                            ("Sauces", "Sauces"),
                            ("Alcohol", "Alcohol"),
                            ("Liquids", "Liquids"),
                            ("Other", "Other"),
                        ],
                        default="Other",
                        max_length=50,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="IngredientUsage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("amount", models.FloatField()),
                (
                    "ingredient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="culinary.ingredient",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Measure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name="UtensilConversion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "standard_value",
                    models.FloatField(
                        help_text="conversion value in grams",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "ingredient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="culinary.ingredient",
                    ),
                ),
                (
                    "utensil",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="culinary.measure",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Recipe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "calories",
                    models.FloatField(
                        help_text="number of calories in kcal per 100 grams",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "proteins",
                    models.FloatField(
                        help_text="amount of proteins in kcal per 100 grams",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "fats",
                    models.FloatField(
                        help_text="amount of fats in kcal per 100 grams",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "carbs",
                    models.FloatField(
                        help_text="amount of carbs in kcal per 100 grams",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                ("title", models.CharField(max_length=150)),
                ("thumbnail", models.ImageField(blank=True, null=True, upload_to="")),
                ("portions", models.PositiveSmallIntegerField()),
                ("total_time", models.TimeField()),
                ("instructions", models.TextField()),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "favorites",
                    models.ManyToManyField(
                        related_name="favorites", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "ingredients",
                    models.ManyToManyField(
                        through="culinary.IngredientUsage", to="culinary.ingredient"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="ingredientusage",
            name="measure",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="culinary.measure"
            ),
        ),
        migrations.AddField(
            model_name="ingredientusage",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="culinary.recipe"
            ),
        ),
        migrations.CreateModel(
            name="Fridge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("shelf", models.ManyToManyField(to="culinary.ingredient")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="utensilconversion",
            constraint=models.CheckConstraint(
                check=models.Q(("standard_value__gte", 0.0)), name="standard_value >= 0"
            ),
        ),
        migrations.AddConstraint(
            model_name="utensilconversion",
            constraint=models.UniqueConstraint(
                fields=("utensil", "ingredient"),
                name="utensil and ingredient combination must be unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="recipe",
            constraint=models.CheckConstraint(
                check=models.Q(("calories__gte", 0.0)), name="recipe calories >= 0"
            ),
        ),
        migrations.AddConstraint(
            model_name="recipe",
            constraint=models.CheckConstraint(
                check=models.Q(("proteins__gte", 0.0)), name="recipe proteins >= 0"
            ),
        ),
        migrations.AddConstraint(
            model_name="recipe",
            constraint=models.CheckConstraint(
                check=models.Q(("fats__gte", 0.0)), name="recipe fats >= 0"
            ),
        ),
        migrations.AddConstraint(
            model_name="recipe",
            constraint=models.CheckConstraint(
                check=models.Q(("carbs__gte", 0.0)), name="recipe carbs >= 0"
            ),
        ),
        migrations.AddConstraint(
            model_name="ingredient",
            constraint=models.CheckConstraint(
                check=models.Q(("calories__gte", 0.0)), name="ingredient calories >= 0"
            ),
        ),
        migrations.AddConstraint(
            model_name="ingredient",
            constraint=models.CheckConstraint(
                check=models.Q(("proteins__gte", 0.0)), name="ingredient proteins >= 0"
            ),
        ),
        migrations.AddConstraint(
            model_name="ingredient",
            constraint=models.CheckConstraint(
                check=models.Q(("fats__gte", 0.0)), name="ingredient fats >= 0"
            ),
        ),
        migrations.AddConstraint(
            model_name="ingredient",
            constraint=models.CheckConstraint(
                check=models.Q(("carbs__gte", 0.0)), name="ingredient carbs >= 0"
            ),
        ),
    ]
